{"version":3,"sources":["Card.js","CardList.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Card","user","key","id","className","src","username","alt","email","phone","CardList","userList","map","i","Search","onSearch","type","placeholder","onChange","App","event","setState","searchInput","target","value","state","fetch","then","res","json","filteredUsers","this","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4OAaeA,G,MAXF,SAAC,GAAW,IAAVC,EAAS,EAATA,KACX,OACI,yBAAKC,IAAKD,EAAKE,GAAIC,UAAU,uCACzB,yBAAKC,IAAG,kDAA6CJ,EAAKK,SAAlD,iBAA2EC,IAAI,aACvF,4BAAKN,EAAKK,UACV,2BAAIL,EAAKO,OACT,2BAAIP,EAAKQ,UCQNC,EAbE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,SAEhB,OACI,6BAEQA,EAASC,KAAI,SAACX,EAAMY,GAChB,OAAO,kBAAC,EAAD,CAAMX,IAAKW,EAAGZ,KAAMA,SCDhCa,EANA,SAAC,GAAe,IAAdC,EAAa,EAAbA,SACb,OACI,2BAAOC,KAAK,SAASC,YAAY,sBAAsBC,SAAUH,KCoC1DI,E,kDAjCb,aAAc,IAAD,8BACX,gBAaFJ,SAAW,SAACK,GACV,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJJ,E,gEAQO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAA1B,GAAS,EAAKoB,SAAS,CAACV,SAAUV,S,+BAOjC,IAAD,OACA6B,EAAgBC,KAAKN,MAAMd,SAASqB,QAAO,SAAA/B,GAC/C,OAAOA,EAAKK,SAAS2B,cAAcC,SAAS,EAAKT,MAAMH,YAAYW,kBAGrE,OACE,yBAAK7B,UAAU,MACb,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAQW,SAAUgB,KAAKhB,WACvB,kBAAC,EAAD,CAAUJ,SAAUmB,S,GA7BVK,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fb3ef9fd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = ({user}) =>{\r\n    return(\r\n        <div key={user.id} className=\"tc ba br3 dib pa3 ma2 grow shadow-5\">\r\n            <img src={`https://robohash.org/set_set4/bgset_bg2/${user.username}?size=200x200`} alt=\"user_pic\"></img>\r\n            <h2>{user.username}</h2>\r\n            <p>{user.email}</p>\r\n            <p>{user.phone}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ userList }) =>{\r\n    \r\n    return(\r\n        <div>\r\n            {\r\n                userList.map((user, i) =>{\r\n                    return <Card key={i} user={user} />\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\n\r\nconst Search = ({onSearch}) =>{\r\n    return(\r\n        <input type=\"search\" placeholder=\"Who you lookn' for?\" onChange={onSearch}/>\r\n    )\r\n}\r\n\r\nexport default Search","import React from 'react';\r\nimport './App.css';\r\nimport CardList from './CardList'\r\nimport Search from './Search'\r\n\r\nclass App extends React.Component{\r\n\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      userList: [],\r\n      searchInput: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(res => res.json())\r\n    .then(user => {this.setState({userList: user})})\r\n  }\r\n\r\n  onSearch = (event) =>{\r\n    this.setState({ searchInput: event.target.value })\r\n  }\r\n\r\n  render(){\r\n    const filteredUsers = this.state.userList.filter(user =>{\r\n      return user.username.toLowerCase().includes(this.state.searchInput.toLowerCase())\r\n    })\r\n\r\n    return(\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">Friend-A-Dex</h1>\r\n        <Search onSearch={this.onSearch}/>\r\n        <CardList userList={filteredUsers}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}